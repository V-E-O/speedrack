{% extends "layout.html.jinja" %}
{% from "helpers/link_to.html.jinja" import link_to %}
{% from "helpers/file.html.jinja" import mono_file_summary %}

{% block navigation_list -%}
{{ render_nav('help') }}
{%- endblock navigation_list %}

{%- block content %}

<div class="container-fluid">

  {%- with messages = get_flashed_messages(with_categories=True) %}
  {%- if messages %}
    {% for category, message in messages %}
      {{ render_flash(message, category) }}
    {% endfor %}
  {% endif -%}
  {% endwith -%}

  <h2>Status Codes</h2>
  <table class="table table-striped">
    {% for status in get_all_status() %}
    <tr>
      <td><span class="label label-{{ status|status_severity }}">{{ status }}</span></td>
      <td>{{ get_status_description(status) }}</td>
    </tr>
    {% endfor %}
  </table>

  <h2>Interval vs Cron</h2>

  <h3>Scheduling by Interval</h3>
  <p>A simple joined string: <tt class="docutils literal">1h10m</tt> means every one hour, ten minutes. Full vocabulary:</p>
  <pre class="literal-block">
    { 'M': month, 'w': week, 'd': day, 'h': hour, 'm': minute, 's': second }
  </pre>
  <p>Don't forget that <em>interval</em> measures the time <em>between</em> complete executions -- a task that takes roughly ten minutes to complete with an interval of thirty minutes will kick off roughly every forty minutes, not every thirty minutes.</p>

  <h3>Scheduling by cron</h3>
  <p>See APScheduler's documentation for <a class="reference external" href="http://readthedocs.org/docs/apscheduler/en/latest/modules/scheduler.html#apscheduler.scheduler.Scheduler.add_cron_job">add_cron_job</a>. In summary:</p>
  <pre class="literal-block">
    year - year to run on
    month - month to run on
    day - day of month to run on
    week - week of the year to run on
    day_of_week - weekday to run on (0 = Monday)
    hour - hour to run on
    second - second to run on
  </pre>
  <p>Examples:</p>
  <ul class="simple">
    <li><tt class="docutils literal">{ &quot;day_of_week&quot;: 2, &quot;hour&quot;: 23 }</tt>: Tuesdays at 23:00</li>
    <li><tt class="docutils literal">{ &quot;day&quot;: 2, &quot;hour&quot;: 23 }</tt>: The 2nd of every month at 23:00</li>
    <li><tt class="docutils literal">{ &quot;hour&quot;: 23 }</tt>: Every day at 23:00</li>
  </ul>

  <h3>Run Now</h3>
  <p>Using <tt class="docutils literal">Run Now</tt> does not modify the next launch time. It schedules a parallel execution that happens <em>in addition</em> to your other scheduling. Be aware of the following:</p>
  <ul class="simple">
    <li>Start at 00:00:00, cron set to every 30m.</li>
    <li>At 00:29:00, click <tt class="docutils literal">Run Now</tt>.</li>
    <li>At 00:30:00, Speedrack executes the scheduled task, perhaps in parallel with the manually submitted one.</p>
  </ul>
  
  <h2>Active/Inactive Tasks</h2>

  <p><em>Active</em> tasks are currently scheduled via (re)loading <code>&lt;arg&gt;.yaml</code></p>
  <p><em>Inactive</em> tasks are discovered histories in the same directory set by <code>JOB_ROOT_DIR</code>. Inactive jobs don't have a "Run Now" ability, and max_runs is not respected.</p>


  <h2>Task Settings</h2>

  <dl>

    <dt><code>max_keep</code></dt>
    <dd>Set per task. Only effective for active (that is, scheduled) tasks.</dd>

    <dt><code>name</code></dt>
    <dd>Set per task. The task history for a task is stored via directory name, based on task name. Changing this name resets bookkeeping for the task and probably leaves an inactive task in its wake.</dd>

  </dl>

</div>

{% endblock content -%}
